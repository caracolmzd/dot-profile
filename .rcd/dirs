#!/bin/bash

# # #
# Dirs
#

# tree - list contents of directories in a tree-like format.
alias ld='tree -dL 2'
alias lld='tree -dL 3'

#
# helpers for dirs/pushd/popd shell built-ins 
#

# list the directory stack with indexes
# and reversed so the current directory is at the bottom
# alias dir-index='dirs -v | tac'
alias dir-index='dirs -v'

alias dix=dir-index
alias pd='dir-stack'
alias nx=nxt
alias prv='nxt -1'
alias pv='nxt -1'

# list the contents of the current directory
dir-contents() {
	echo " -  $(pwd) - "
	
	if command -v tree >/dev/null 2>&1; then
		# use tree if it is installed
		tree -L 1 --dirsfirst
	else
		ls -1 --group-directories-first
	fi
}

# change the default switching behavior of the pushd command.
# By default, pushd pushes index 1 to the top of the stack.
# Instead, we default to +1, so the ring is rotated.
# With arguments, is just a wrapper for our pushd wrapper.
# Suppresses output of the stack and instead lists contents.
nxt() {
	# if no args, move to the next directory in the stack
	if [ "$#" -eq 0 ]; then
		dir-stack +1 >/dev/null || return 1
	else
		dir-stack "$@" >/dev/null || return 1
	fi
	dir-contents
}

#
# wrap pushd so we can pass a stack position without plus or minus
# prevents adding duplicate dirs to the stack
# and list the stack with indexes
#
# if no args, move to the next directory in the stack
# if the arg is negative, move back that many directories...
# rather than the default of using zero-based negative indexes
# accepts one or more directories to push to the stack
dir-stack() {
	# if no args, move to the next directory in the stack
	if [ "$#" -eq 0 ]; then
		pushd >/dev/null || return 1
		dir-index
		return
	fi

	# if the arg is an index, move to that index
	# direction is optional and defaults to "+"
	if [[ "$1" =~ ^[+-]?[0-9]+$ ]]; then
		prefix=${1:0:1}
		if [[ "$prefix" =~ ^[+-]$ ]]; then
			if [[ "$prefix" == "-" ]]; then
				# subtract 1 for more intuitive stack rotation
				num=$(( ${1:1} - 1 ))
				pushd "-$num" >/dev/null || return 1
			else
				pushd "$1" >/dev/null || return 1
			fi
		else
			# if no prefix, default to "+"
			pushd "+$1" >/dev/null || return 1
		fi
		dir-index && return
	fi

	# if "-c" was passed, clear the stack
	if [ "$1" == "-c" ]; then 
		shift 
		dirs -c
	fi
	
	# create a copy of the arguments and resolve each path
	# to an absolute path
	paths=()
	for arg in "$@"; do
		paths+=("$(realpath "$arg")")
	done

	# push each path to the stack
	for path in "${paths[@]}"; do
		pushd "$path" >/dev/null || return 1
	done

	#
	# remove duplicates from the stack
	#

	# Get the current directory stack and reverse it
	stack=$(dirs -p -l | tac)
	# Clear the original directory stack
	dirs -c
	# Initialize an associative array to store unique directories
	declare -A unique_dirs
	# Initialize a new stack
	new_stack=()

	# Process each directory in the reversed stack
	while read -r dir; do
		# If the directory is not in the set of unique directories, add it to the set and the new stack
		if [[ -z "${unique_dirs[$dir]}" ]]; then
			unique_dirs[$dir]=1
			new_stack+=("$dir")
		fi
	done <<< "$stack"

	# Recreate the stack from the unique directories
	for index in "${!new_stack[@]}"; do
		dir="${new_stack[$index]}"
		# if $dir is not current directory, push it
		if [ "$dir" != "$(pwd)" ]; then
			pushd -n "$dir" >/dev/null || return 1
		fi
	done

	dir-index
}

# Change directory and update the stack
# a `cd` replacement
# if changing to a parent or child, update, instead of adding
change-dir() {

	# if no args, change to $HOME
	if [ "$#" -eq 0 ]; then
		dir-stack "$HOME" >/dev/null || return 1
		return
	fi

	# support "-" as an alias for the previous directory
	if [ "$1" == "-" ]; then
		dir-stack -1 >/dev/null || return 1
		return
	fi

	# push the new directory to the stack
	dir-stack "$1" >/dev/null || return 1
	
	# get the real path of the current directory
	current_dir=$(realpath .)
	# get the real path of the previous directory
	previous_dir=$(dirs -l -p +1)

	# Initialize do_pop flag as false
	do_pop=false

	# Check if the previous directory is the parent of the current directory
	if [[ "$current_dir" == "$previous_dir"/* ]]; then
		do_pop=true
	# Check if the current directory is the parent of the previous directory
	elif [[ "$previous_dir" == "$current_dir"/* ]]; then
		do_pop=true
	fi

	if [[ "$do_pop" == true ]]; then
		# but first, check the length of the stack
		# if it is only 2, we don't want to remove the previous directory
		if [ "$(dirs -l -p | wc -l)" -gt 2 ]; then
			popd -n +1 >/dev/null || return 1
		fi
	fi
	# print the contents
	dir-contents
}

alias cd=change-dir

#
# load the passed list of directories into the stack, 
# or default to the child directories of the current directory
# -c will clear the stack before loading
load-dirs() {
	if [ "$#" -eq 0 ]; then
		# no args, load child directories
		dirs -c # clear ring
		while read -r dirname 
		do
			pushd -n "$dirname" >/dev/null
		done <<< "$(find -L "$(realpath .)"/* -maxdepth 0 -type d)"
		dir-index
		return
	fi
	
	# pass the list of directories to dir-stack
	dir-stack "$@" || return 1
}

#
# Misc
#

#
# resolve the real path of a given link and cd
follow() {
	cannonical=$(readlink -f "${1}")
	pushd "${cannonical}" >/dev/null || return 1
}

#
# locate an executable and cd
which-dir() {
	file_location=$(which "${1}")
	if [ -L "$file_location" ]; then
		file_location=$(readlink -f "$file_location")
	fi
	dir_location=$(dirname "$file_location")
	follow "$dir_location" >/dev/null
}
